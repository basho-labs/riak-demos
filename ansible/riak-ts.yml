---
- hosts: riak-ts
  sudo: true
  roles:
    - { role: ansible-riak }
  vars:
    ## Riak vars
    riak_package: riak-ts
    riak_backend: leveldb
    anti_entropy: passive
    ring_leader_ip: "{{ hostvars[groups['riak-ts'][0]]['ansible_eth1']['ipv4']['address'] }}"
    ring_leader: "riak@{{ ring_leader_ip  }}"
    riak_node_name: "riak@{{ ansible_eth1['ipv4']['address'] }}"
    ## Demo vars
    demo_dir: /home/{{ ansible_ssh_user }}/ts-demo
    # Currently, for Ubuntu only
    demo_pkg_deps:
      - git
      - daemon
      - python-dev
      - libffi-dev
      - libssl-dev
      - libpng12-dev
      - libfreetype6
      - libfreetype6-dev
      - python-pip
      - libpython-dev
      - libevent-dev
      - pkg-config
    demo_pip_global_deps:
      - pip
      - virtualenv
    demo_pip_venv_deps:
      - jupyter
      - riak
    demo_location: https://s3.amazonaws.com/files.basho.com/demos/time_series
    demo_materials: 
      - aarhusdemofiles.tar
      - all-data-2.tar.gz
  tasks:
    ## Riak Clustering
    - name: Join the cluster
      riak: command=join target_node={{ ring_leader }}
      when: inventory_hostname != groups['riak-ts'][0]

    - name: Check Riak Ring
      command: 'riak-admin cluster status'
      register: riak_ring_status

    - name: Plan the cluster
      riak: command=plan wait_for_ring=300
      when: riak_ring_status.stdout.find('joining') > 0 and inventory_hostname == groups['riak-ts'][0]

    - name: Commit the cluster
      riak: command=commit wait_for_handoffs=300
      when: riak_ring_status.stdout.find('joining') > 0 and inventory_hostname == groups['riak-ts'][0]

    ## Demo setup
    - name: Install demo package deps
      package: name={{ item }} state=latest
      with_items: "{{ demo_pkg_deps }}"
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Install demo global pip deps
      pip: name={{ item }} state=latest
      with_items: "{{ demo_pip_global_deps }}"
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Create the demo virtualenv
      sudo: no
      command: "virtualenv {{ demo_dir }}"
      args:
        creates: "{{ demo_dir }}"
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Pull down demo materials
      get_url: url={{ demo_location }}/{{ item }} dest={{ demo_dir }}/{{ item }}
      with_items: demo_materials
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Extract the demo data
      unarchive: src={{ demo_dir }}/{{ item }} dest={{ demo_dir }} copy=no
      with_items: demo_materials
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Install virtualenv pip requirements
      sudo: no
      pip: virtualenv={{ demo_dir }} requirements={{ demo_dir }}/requirements.txt state=latest
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Install virtualenv pip deps
      sudo: no
      pip: name={{ item }} virtualenv={{ demo_dir }} state=latest
      with_items: "{{ demo_pip_venv_deps }}"
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Launch jupyter
      sudo: no
      shell: ". bin/activate; daemon -- jupyter notebook --no-browser --notebook-dir {{ demo_dir }}"
      args:
        chdir: "{{ demo_dir }}"
        executable: /bin/bash
      when: inventory_hostname == groups['riak-ts'][0]

    - name: Demo info
      debug: msg="To access the demo page, run `vagrant ssh {{ groups['riak-ts'][0] }} -- -NfgL8888:localhost:8888`, and then head to 'http://localhost:8888' in your web browser"
      when: inventory_hostname == groups['riak-ts'][0]
